// Mocks generated by Mockito 5.4.5 from annotations
// in rtm_sat/test/features/visits_tracker/presentation/cubit/visits_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rtm_sat/features/visits_tracker/domain/entities/visit.dart'
    as _i5;
import 'package:rtm_sat/features/visits_tracker/domain/repositories/visits_repository.dart'
    as _i2;
import 'package:rtm_sat/features/visits_tracker/domain/usecases/create_visit.dart'
    as _i6;
import 'package:rtm_sat/features/visits_tracker/domain/usecases/delete_visit.dart'
    as _i8;
import 'package:rtm_sat/features/visits_tracker/domain/usecases/get_visit_by_id.dart'
    as _i10;
import 'package:rtm_sat/features/visits_tracker/domain/usecases/get_visits.dart'
    as _i3;
import 'package:rtm_sat/features/visits_tracker/domain/usecases/sync_visits.dart'
    as _i9;
import 'package:rtm_sat/features/visits_tracker/domain/usecases/update_visit.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVisitsRepository_0 extends _i1.SmartFake
    implements _i2.VisitsRepository {
  _FakeVisitsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetVisitsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVisitsUseCase extends _i1.Mock implements _i3.GetVisitsUseCase {
  MockGetVisitsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VisitsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVisitsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VisitsRepository);

  @override
  _i4.Future<List<_i5.Visit>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Visit>>.value(<_i5.Visit>[]),
      ) as _i4.Future<List<_i5.Visit>>);
}

/// A class which mocks [CreateVisitUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateVisitUseCase extends _i1.Mock
    implements _i6.CreateVisitUseCase {
  MockCreateVisitUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VisitsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVisitsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VisitsRepository);

  @override
  _i4.Future<dynamic> call(_i5.Visit? visit) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [visit],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}

/// A class which mocks [UpdateVisitUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateVisitUseCase extends _i1.Mock
    implements _i7.UpdateVisitUseCase {
  MockUpdateVisitUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VisitsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVisitsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VisitsRepository);

  @override
  _i4.Future<void> call(_i5.Visit? visit) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [visit],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DeleteVisitUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteVisitUseCase extends _i1.Mock
    implements _i8.DeleteVisitUseCase {
  MockDeleteVisitUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VisitsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVisitsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VisitsRepository);

  @override
  _i4.Future<void> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [SyncVisitsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncVisitsUseCase extends _i1.Mock implements _i9.SyncVisitsUseCase {
  MockSyncVisitsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VisitsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVisitsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VisitsRepository);

  @override
  _i4.Future<void> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetVisitByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVisitByIdUseCase extends _i1.Mock
    implements _i10.GetVisitByIdUseCase {
  MockGetVisitByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VisitsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVisitsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VisitsRepository);

  @override
  _i4.Future<_i5.Visit?> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i4.Future<_i5.Visit?>.value(),
      ) as _i4.Future<_i5.Visit?>);
}
